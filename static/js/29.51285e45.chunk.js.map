{"version":3,"sources":["components/common/PinCodeForm/index.jsx","redux/actions/money-transfer/confirmTransaction.js","hoc/Wrapper/index.jsx","components/MoneyTransfer/SendMoney/TransactionEntity.jsx","redux/actions/money-transfer/moveFunds.js","components/common/Dropdown/WalletDropdown.jsx","utils/monthdates.js","redux/actions/contacts/getRecentActiveContacts.js","components/MoneyTransfer/SendMoney/index.jsx","components/MoneyTransfer/SendMoney/SendMoneyModal.jsx","redux/actions/contacts/addTransactionContactToRecents.js","containers/MoneyTransfer/SendMoney/index.jsx","components/common/Loader/index.jsx"],"names":["PinCodeForm","label","onChange","pinError","shouldClear","digitRefs","push","useRef","useState","digitWithFocus","setDigitWithFocus","useEffect","current","focus","className","global","translate","Field","Array","fill","map","value","index","key","toString","type","name","ref","maxLength","onKeyUp","e","persist","target","trim","length","parseInt","slice","style","marginTop","pointing","prompt","defaultProps","data","dispatch","apiAction","method","url","onStart","CONFIRM_TRANSACTION_START","payload","onSuccess","CONFIRM_TRANSACTION_SUCCESS","onFailure","error","CONFIRM_TRANSACTION_ERROR","clearConfirmation","CLEAR_TRANSACTION_INFO","Wrapper","props","children","TransactionEntity","customStyle","form","isSendingCash","walletList","currentOption","setCurrentOption","walletTitle","destinationContact","isSelfBuying","isSendingMoney","useSelector","state","dashboard","contactActions","walletOptions","el","id","AccountNumber","text","Flag","AccountName","content","src","width","display","margin","flexDirection","alignItems","FirstName","avatar","PictureURL","secondName","LastName","height","marginLeft","alignSelf","borderRadius","textAlign","search","options","keyName","renderLabel","dp","endpoint","MOVE_FUNDS_START","MOVE_FUNDS_SUCCESS","MOVE_FUNDS_ERROR","clearMoveFundsErrors","CLEAR_MOVE_FUNDS_ERRORS","CustomDropdown","placeholder","trigger","icon","Menu","scrolling","Item","onClick","getNumberWithOrdinal","n","possiblepostifixes","v","getPossibleDates","days","i","day","val","GET_RECENT_ACTIVE_CONTACTS_START","GET_RECENT_ACTIVE_CONTACTS_SUCCESS","GET_RECENT_ACTIVE_CONTACTS_ERROR","SendMoney","history","userData","allContacts","setForm","setContactPID","onOptionsChange","setBalance","moveFundsToToUWallet","balanceOnWallet","modalOpen","setOpen","setDestinationContact","currency","checkTransactionConfirmation","destinationWallets","checking","confirmationError","confirmationData","loading","setStep","step","DefaultWallet","errors","setErrors","resetState","open","PropTypes","string","SendMoneyModal","defaultOption","find","item","Default","currentDestOption","setCurrentDestOption","allContactsData","contacts","updateDestinationContactDefaultWallet","contact","WalletNumber","WalletName","Currency","ContactPID","user2wallets","clearForm","transition","duration","animation","onClose","size","closeOnDimmerClick","closeOnDocumentClick","Header","Content","amount","role","tabIndex","onKeyPress","message","Description","loaderContent","Amount","Fees","ExternalFees","ExchangeFees","Taxes","ExchangeRate","fontSize","fontWeight","TotalAmount","AmountToBeSent","reference","description","isRecurring","checked","selection","popupPosition","iconPosition","dateFormat","startDate","Date","toDateString","endDate","sendNow","pin","Actions","negative","disabled","positive","ADD_CONTACT_TO_RECENTS","SendMoneyContainer","setSendMoneyOpen","sendMoneyOpen","user","myWallets","React","contactPID","setCurrency","setDestinationWallets","countryCode","setCountryCode","targetCurrency","setTargetCurrencyCode","setallContacts","useHistory","useDispatch","getMyWallets","sourceWallet","moneyTransfer","confirmTransaction","recentContacts","activeContacts","activeExternalContacts","moveFundsTo2UWallet","setShouldClear","UserLoginCorrect","isNewContact","exists","isArray","filter","forEach","element","PhoneNumber","toast","success","params","PID","MaxRecordsReturned","getRecentActiveContacts","getRecentContacts","TransferNumber","addTransactionContactToRecents","addRecentContact","balanceData","Balance","contactWallets","contactWallet","Wallets","wallet","loadContacts","getallContacts","digit0","digit1","digit2","digit3","PIN","CountryCode","walletData","CurrencyCode","TargetCurrency","substr","TargetType","SourceWallet","hasError","parseFloat","validate","UseDefaultWallet","TargetWallet","DateFrom","DateTo","Day","Reccurent","SendNow","Reference","moveFunds","retryContacts","LoaderComponent","paddingTop","paddingBottom","loaderSize","active","inline"],"mappings":"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","file":"static/js/29.51285e45.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input, Label } from 'semantic-ui-react';\nimport './PinCodeForm.scss';\n\nconst PinCodeForm = ({ label, onChange, pinError, shouldClear }) => {\n  const digitRefs = [];\n  digitRefs.push(useRef(null));\n  digitRefs.push(useRef(null));\n  digitRefs.push(useRef(null));\n  digitRefs.push(useRef(null));\n  const [digitWithFocus, setDigitWithFocus] = useState(null);\n\n  useEffect(() => {\n    if (digitRefs[digitWithFocus]) {\n      digitRefs[digitWithFocus].current.focus();\n    }\n  }, [digitRefs, digitWithFocus]);\n\n  return (\n    <div className=\"pin-input-form\">\n      <span>{global.translate(label, 1431)}</span>\n      <Form.Field className=\"pin-input-group\">\n        {Array(4)\n          .fill()\n          .map((value, index) => {\n            return (\n              <Input\n                key={index.toString()}\n                type=\"password\"\n                name={`digit${index}`}\n                value={shouldClear ? '' : value}\n                ref={digitRefs[index]}\n                className=\"pin-input\"\n                maxLength=\"1\"\n                onChange={onChange}\n                onKeyUp={e => {\n                  e.persist();\n                  if (e.target.value.trim().length === 1) {\n                    setDigitWithFocus(\n                      parseInt(e.target.name.slice(-1), 10) + 1,\n                    );\n                  }\n                }}\n              />\n            );\n          })}\n      </Form.Field>\n      {pinError && (\n        <Form.Field style={{ marginTop: '-7px' }}>\n          <Label pointing prompt>\n            {global.translate(pinError)}\n          </Label>\n        </Form.Field>\n      )}\n    </div>\n  );\n};\n\nPinCodeForm.propTypes = {\n  label: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  pinError: PropTypes.string,\n  shouldClear: PropTypes.bool,\n};\nPinCodeForm.defaultProps = {\n  label: 'Enter your 4 digit PIN',\n  pinError: null,\n  shouldClear: false,\n};\nexport default PinCodeForm;\n","import {\n  CONFIRM_TRANSACTION_ERROR,\n  CONFIRM_TRANSACTION_START,\n  CONFIRM_TRANSACTION_SUCCESS,\n  CLEAR_TRANSACTION_INFO,\n} from 'constants/action-types/money-transfer';\nimport apiAction from 'helpers/apiAction';\n\nexport default data => dispatch => {\n  return dispatch(\n    apiAction({\n      method: 'post',\n      url: '/TransferConfirmation',\n      data,\n      onStart: () => dispatch =>\n        dispatch({\n          type: CONFIRM_TRANSACTION_START,\n          payload: data,\n        }),\n      onSuccess: data => dispatch => {\n        return dispatch({\n          type: CONFIRM_TRANSACTION_SUCCESS,\n          payload: data,\n        });\n      },\n      onFailure: error => dispatch => {\n        return dispatch({\n          type: CONFIRM_TRANSACTION_ERROR,\n          payload: {\n            ...error,\n          },\n        });\n      },\n    }),\n  );\n};\nexport const clearConfirmation = () => dispatch => {\n  return dispatch({\n    type: CLEAR_TRANSACTION_INFO,\n  });\n};\n","const Wrapper = (props) => props.children;\n\nexport default Wrapper;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Image } from 'semantic-ui-react';\nimport './entity-wrapper.scss';\nimport PropTypes from 'prop-types';\nimport Thumbnail from 'components/common/Thumbnail';\nimport CustomDropdown from 'components/common/Dropdown/WalletDropdown';\nimport Wrapper from 'hoc/Wrapper';\n\nfunction TransactionEntity({\n  customStyle,\n  onChange,\n  name,\n  form,\n  data,\n  isSendingCash,\n  walletList,\n  currentOption,\n  setCurrentOption,\n  walletTitle,\n  destinationContact,\n  isSelfBuying,\n}) {\n  const { isSendingMoney } = useSelector(\n    state => state.dashboard.contactActions,\n  );\n  const walletOptions =\n    walletList &&\n    walletList.map(el => {\n      return {\n        id: el.AccountNumber,\n        text: el.AccountNumber,\n        value: el.AccountNumber,\n        Flag: el.Flag,\n        AccountName: el.AccountName,\n        AccountNumber: el.AccountNumber,\n        content: (\n          <div className=\"flag-wrapper\" key={el.AccountName}>\n            <Image src={el.Flag} width={30} />\n            <div className=\"left\">\n              <h5 className=\"account\">{el.AccountNumber}</h5>\n              <small>({el.AccountName})</small>\n            </div>\n          </div>\n        ),\n      };\n    });\n\n  const renderLabel = label => {\n    return {\n      content: (\n        <div className=\"flag-wrapper\">\n          <Image src={label.dp} width={30} />\n          <div className=\"left\">\n            <h4 className=\"account\">{label.AccountNumber}</h4>\n            <small>({label.AccountName})</small>\n          </div>\n        </div>\n      ),\n    };\n  };\n  return (\n    <div\n      className=\"entity-wrapper\"\n      style={\n        isSendingCash\n          ? {\n              display: 'flex',\n              margin: 'auto',\n              flexDirection: 'column',\n              alignItems: 'center',\n            }\n          : {}\n      }\n    >\n      {data && data.data && (\n        <div className=\"transacters\">\n          {' '}\n          <Thumbnail\n            name={data.data.FirstName}\n            avatar={data.data.PictureURL}\n            secondName={data.data.LastName}\n            height=\"75px\"\n            width=\"75px\"\n            style={{\n              height: 75,\n              width: 75,\n              marginLeft: isSendingCash ? '24px' : '0px',\n              alignSelf: isSendingCash ? 'center' : 'flex-end',\n              borderRadius: '50%',\n            }}\n          />\n          {!isSendingMoney && !isSelfBuying && (\n            <Wrapper>\n              {' '}\n              <span className=\"destination\"> To </span>\n              <Thumbnail\n                style={{\n                  height: 75,\n                  width: 75,\n                  marginLeft: isSendingCash ? '24px' : '0px',\n                  alignSelf: isSendingCash ? 'center' : 'flex-end',\n                  borderRadius: '50%',\n                }}\n                name={destinationContact.FirstName}\n                avatar={destinationContact.PictureURL}\n                secondName={destinationContact.LastName}\n                height={75}\n              />{' '}\n            </Wrapper>\n          )}\n        </div>\n      )}\n\n      <div\n        className=\"rightItems\"\n        style={{ width: customStyle ? '116%' : 'auto' }}\n      >\n        <p\n          className=\"choose-wallet\"\n          style={{\n            textAlign: isSendingCash ? 'center' : null,\n            marginTop: '-.9rem',\n          }}\n        >\n          {global.translate(walletTitle)}\n        </p>\n\n        <CustomDropdown\n          search\n          customStyle\n          options={walletOptions}\n          currentOption={currentOption}\n          setCurrentOption={setCurrentOption}\n          onChange={onChange}\n          className=\"custom-dropdown\"\n          name={name}\n          keyName={name}\n          value={form[name]}\n          renderLabel={renderLabel}\n        />\n      </div>\n    </div>\n  );\n}\n\nTransactionEntity.propTypes = {\n  onChange: PropTypes.func,\n  name: PropTypes.string,\n  form: PropTypes.objectOf(PropTypes.any),\n  data: PropTypes.objectOf(PropTypes.any),\n  isSendingCash: PropTypes.bool,\n  walletTitle: PropTypes.string,\n  walletList: PropTypes.arrayOf(PropTypes.any),\n  currentOption: PropTypes.objectOf(PropTypes.any),\n  setCurrentOption: PropTypes.func.isRequired,\n  destinationContact: PropTypes.objectOf(PropTypes.any),\n  isSelfBuying: PropTypes.bool,\n  isSendingMoney: PropTypes.bool,\n  customStyle: PropTypes.bool,\n};\n\nTransactionEntity.defaultProps = {\n  onChange: () => {},\n  name: null,\n  isSendingCash: false,\n  form: {},\n  currentOption: null,\n  data: {},\n  walletList: [],\n  walletTitle: 'Choose a wallet',\n  destinationContact: {},\n  isSelfBuying: false,\n  isSendingMoney: false,\n  customStyle: false,\n};\nexport default TransactionEntity;\n","import {\n  MOVE_FUNDS_ERROR,\n  MOVE_FUNDS_START,\n  MOVE_FUNDS_SUCCESS,\n  CLEAR_MOVE_FUNDS_ERRORS,\n} from 'constants/action-types/money-transfer';\nimport apiAction from 'helpers/apiAction';\n\nexport default (\n  data,\n  endpoint = '/TransferFunds2UWallet',\n  type = 'send-money',\n) => dispatch => {\n  return dispatch(\n    apiAction({\n      method: 'post',\n      url: endpoint,\n      data,\n      onStart: () => dispatch =>\n        dispatch({\n          type: MOVE_FUNDS_START,\n          payload: data,\n        }),\n      onSuccess: data => dispatch => {\n        return dispatch({\n          type: MOVE_FUNDS_SUCCESS,\n          payload: [{ ...data[0], type }],\n        });\n      },\n      onFailure: error => dispatch => {\n        return dispatch({\n          type: MOVE_FUNDS_ERROR,\n          payload: {\n            ...error,\n          },\n        });\n      },\n    }),\n  );\n};\nexport const clearMoveFundsErrors = () => dispatch => {\n  return dispatch({\n    type: CLEAR_MOVE_FUNDS_ERRORS,\n  });\n};\n","import React from 'react';\nimport { Image, Dropdown, Icon } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nimport './Dropdown.scss';\n\nconst CustomDropdown = ({\n  options,\n  currentOption,\n  onChange,\n  keyName,\n  setCurrentOption,\n  placeholder,\n  style,\n}) => {\n  return (\n    <Dropdown\n      style={style}\n      className=\"custom-dropdown\"\n      trigger={\n        <span className=\"dropdown-trigger\">\n          {currentOption && currentOption.AccountNumber ? (\n            <div className=\"dropdown-wallet\">\n              <Image src={currentOption.Flag} className=\"inline\" />\n              <div>\n                <div>{currentOption.AccountNumber}</div>\n                <span>\n                  {currentOption.AccountName &&\n                    `(${currentOption.AccountName})`}\n                </span>\n              </div>\n            </div>\n          ) : (\n            <span className=\"placeholder\">{placeholder}</span>\n          )}\n          <Icon name=\"caret down\" className=\"inline\" />\n        </span>\n      }\n      icon={null}\n    >\n      <Dropdown.Menu>\n        <Dropdown.Menu scrolling>\n          {options &&\n            options.map(\n              ({ AccountNumber, Flag, AccountName }, index) => (\n                <Dropdown.Item\n                  key={AccountNumber + index.toString()}\n                  onClick={e => {\n                    onChange(\n                      {\n                        target: {\n                          name: keyName,\n                          value: AccountNumber,\n                        },\n                      },\n                      {\n                        name: keyName,\n                        value: AccountNumber,\n                      },\n                    );\n                    setCurrentOption({\n                      AccountNumber,\n                      Flag,\n                      AccountName: AccountName || '',\n                    });\n                  }}\n                >\n                  <span className=\"dropdown-trigger\">\n                    <div className=\"dropdown-wallet\">\n                      <Image src={Flag} className=\"inline\" />\n                      <div>\n                        <div>{AccountNumber}</div>\n                        <span>\n                          {AccountName && `(${AccountName})`}\n                        </span>\n                      </div>\n                    </div>\n                  </span>\n                </Dropdown.Item>\n              ),\n            )}\n        </Dropdown.Menu>\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n};\n\nCustomDropdown.defaultProps = {\n  options: [],\n  currentOption: {},\n  onChange: () => null,\n  keyName: 'WalletNumber',\n  setCurrentOption: () => {},\n  placeholder: 'Select Wallet',\n};\n\nCustomDropdown.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.instanceOf(Object)),\n  currentOption: PropTypes.instanceOf(Object),\n  onChange: PropTypes.func,\n  setCurrentOption: PropTypes.func,\n  keyName: PropTypes.string,\n  placeholder: PropTypes.string,\n};\n\nexport default CustomDropdown;\n","const getNumberWithOrdinal = n => {\n  const possiblepostifixes = ['th', 'st', 'nd', 'rd'];\n  const v = n % 100;\n  return (\n    n +\n    (possiblepostifixes[(v - 20) % 10] ||\n      possiblepostifixes[v] ||\n      possiblepostifixes[0])\n  );\n};\n\nconst getPossibleDates = () => {\n  const days = [];\n  for (let i = 1; i <= 31; i += 1) {\n    days.push({ day: i, val: getNumberWithOrdinal(i) });\n  }\n  return days;\n};\n\nexport { getPossibleDates };\n","import {\n  GET_RECENT_ACTIVE_CONTACTS_ERROR,\n  GET_RECENT_ACTIVE_CONTACTS_SUCCESS,\n  GET_RECENT_ACTIVE_CONTACTS_START,\n} from 'constants/action-types/contacts/getLastActiveContacts';\n\nimport apiAction from 'helpers/apiAction';\n\nexport default data => dispatch =>\n  dispatch(\n    apiAction({\n      method: 'post',\n      url: '/GetLastTransactionContacts',\n      data,\n      onStart: () => dispatch =>\n        dispatch({\n          type: GET_RECENT_ACTIVE_CONTACTS_START,\n        }),\n      onSuccess: data => dispatch => {\n        return dispatch({\n          type: GET_RECENT_ACTIVE_CONTACTS_SUCCESS,\n          payload: data,\n        });\n      },\n      onFailure: error => dispatch => {\n        return dispatch({\n          type: GET_RECENT_ACTIVE_CONTACTS_ERROR,\n          payload: {\n            ...error,\n          },\n        });\n      },\n    }),\n  );\n","import React from 'react';\nimport './style.scss';\nimport PropTypes from 'prop-types';\nimport SendMoneyModal from './SendMoneyModal';\n\nconst SendMoney = ({\n  history,\n  userData,\n  allContacts,\n  walletList,\n  destinationContact,\n  setForm,\n  setContactPID,\n  onOptionsChange,\n  setBalance,\n  moveFundsToToUWallet,\n  form,\n  balanceOnWallet,\n  modalOpen,\n  setOpen,\n  setDestinationContact,\n  currency,\n  checkTransactionConfirmation,\n  destinationWallets,\n  checking,\n  confirmationError,\n  confirmationData,\n  loading,\n  error,\n  setStep,\n  data,\n  step,\n  DefaultWallet,\n  errors,\n  setErrors,\n  resetState,\n  shouldClear,\n  isSendingMoney,\n}) => {\n  return (\n    <SendMoneyModal\n      open={modalOpen}\n      shouldClear={shouldClear}\n      DefaultWallet={DefaultWallet}\n      userData={userData}\n      destinationContact={destinationContact}\n      setOpen={setOpen}\n      resetState={resetState}\n      walletList={walletList}\n      history={history}\n      destinationWallets={destinationWallets}\n      allContacts={allContacts}\n      setForm={setForm}\n      moveFundsToToUWallet={moveFundsToToUWallet}\n      currency={currency}\n      onOptionsChange={onOptionsChange}\n      form={form}\n      balanceOnWallet={balanceOnWallet}\n      modalOpen={modalOpen}\n      setDestinationContact={setDestinationContact}\n      checkTransactionConfirmation={checkTransactionConfirmation}\n      checking={checking}\n      confirmationError={confirmationError}\n      confirmationData={confirmationData}\n      setContactPID={setContactPID}\n      loading={loading}\n      error={error}\n      data={data}\n      setBalance={setBalance}\n      errors={errors}\n      step={step}\n      setStep={setStep}\n      setErrors={setErrors}\n      isSendingMoney={isSendingMoney}\n    />\n  );\n};\n\nSendMoney.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any),\n  loading: PropTypes.bool,\n  userData: PropTypes.objectOf(PropTypes.any).isRequired,\n  setOpen: PropTypes.func,\n  walletList: PropTypes.arrayOf(PropTypes.any),\n  destinationContact: PropTypes.objectOf(PropTypes.any).isRequired,\n  destinationWallets: PropTypes.arrayOf(PropTypes.any),\n  onOptionsChange: PropTypes.func,\n  form: PropTypes.objectOf(PropTypes.any).isRequired,\n  balanceOnWallet: PropTypes.string,\n  setForm: PropTypes.func,\n  currency: PropTypes.string,\n  checkTransactionConfirmation: PropTypes.func,\n  checking: PropTypes.bool,\n  confirmationError: PropTypes.objectOf(PropTypes.any).isRequired,\n  confirmationData: PropTypes.objectOf(PropTypes.any).isRequired,\n  moveFundsToToUWallet: PropTypes.func,\n  error: PropTypes.objectOf(PropTypes.any).isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  setBalance: PropTypes.func,\n  setDestinationContact: PropTypes.func,\n  allContacts: PropTypes.objectOf(PropTypes.any).isRequired,\n  setContactPID: PropTypes.func.isRequired,\n  modalOpen: PropTypes.bool,\n  errors: PropTypes.string,\n  DefaultWallet: PropTypes.string,\n  setStep: PropTypes.func,\n  step: PropTypes.number,\n  setErrors: PropTypes.func.isRequired,\n  resetState: PropTypes.func.isRequired,\n};\n\nSendMoney.defaultProps = {\n  moveFundsToToUWallet: () => {},\n  loading: false,\n  setBalance: () => {},\n  currency: PropTypes.string,\n  checkTransactionConfirmation: () => {},\n  checking: false,\n  balanceOnWallet: 0,\n  setForm: () => {},\n  destinationWallets: [],\n  onOptionsChange: () => {},\n  setOpen: () => {},\n  walletList: [],\n  history: {},\n  setDestinationContact: () => {},\n  modalOpen: false,\n  step: 1,\n  setStep: () => {},\n  DefaultWallet: null,\n  errors: null,\n};\nexport default SendMoney;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport {\n  Modal,\n  Button,\n  Icon,\n  Input,\n  Dropdown,\n  TransitionablePortal,\n} from 'semantic-ui-react';\nimport { DateInput } from 'semantic-ui-calendar-react';\nimport PropTypes from 'prop-types';\nimport './modal.scss';\nimport { useSelector } from 'react-redux';\nimport ToggleSwitch from 'components/common/ToggleButton';\nimport PinCodeForm from 'components/common/PinCodeForm';\nimport { getPossibleDates } from 'utils/monthdates';\nimport LoaderComponent from 'components/common/Loader';\nimport Message from 'components/common/Message';\nimport TransactionEntity from './TransactionEntity';\n\nconst SendMoneyModal = ({\n  open,\n  userData,\n  setOpen,\n  walletList,\n  destinationContact,\n  destinationWallets,\n  onOptionsChange,\n  form,\n  balanceOnWallet,\n  setForm,\n  currency,\n  checkTransactionConfirmation,\n  checking,\n  confirmationError,\n  confirmationData,\n  moveFundsToToUWallet,\n  loading,\n  setDestinationContact,\n  error,\n  data,\n  errors,\n  setErrors,\n  step,\n  setStep,\n  resetState,\n  shouldClear,\n  isSendingMoney,\n}) => {\n  const defaultOption =\n    walletList && walletList.find(item => item.Default === 'YES');\n  const [currentOption, setCurrentOption] = useState({});\n  const [currentDestOption, setCurrentDestOption] = useState({});\n  const {\n    allContacts: { data: allContactsData },\n  } = useSelector(state => state.contacts);\n  useEffect(() => {\n    if (defaultOption) {\n      setCurrentOption(defaultOption);\n    }\n  }, [defaultOption]);\n\n  const updateDestinationContactDefaultWallet = contact => {\n    if (contact) {\n      setCurrentDestOption({\n        AccountNumber: contact.DefaultWallet.WalletNumber,\n        Flag: contact.DefaultWallet.Flag,\n        AccountName: contact.DefaultWallet.WalletName || '',\n        Currency: contact.DefaultWallet.Currency,\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (destinationContact && destinationContact.DefaultWallet) {\n      updateDestinationContactDefaultWallet(destinationContact);\n    } else if (\n      destinationContact &&\n      !destinationContact.DefaultWallet &&\n      destinationContact.ContactPID\n    ) {\n      const contact = allContactsData.find(\n        item => item.ContactPID === destinationContact.ContactPID,\n      );\n      updateDestinationContactDefaultWallet(contact);\n    }\n  }, [destinationContact]);\n\n  useEffect(() => {\n    if (currentDestOption) {\n      setForm({\n        ...form,\n        user2wallets: currentDestOption.AccountNumber,\n      });\n    }\n  }, [currentDestOption]);\n\n  useEffect(() => {\n    if (data && data[0]) {\n      setStep(step + 1);\n    }\n  }, [data]);\n\n  useEffect(() => {\n    if (step === 3) {\n      setForm({});\n      setStep(1);\n      setErrors(null);\n      setOpen(false);\n      setDestinationContact(null);\n      setCurrentOption(defaultOption);\n    }\n  }, [step]);\n\n  const days = getPossibleDates().map(item => ({\n    key: item.day,\n    value: item.day,\n    text: item.val,\n  }));\n\n  const clearForm = () => {\n    setForm({});\n    setCurrentDestOption({});\n    setCurrentOption(defaultOption);\n    setOpen(false);\n    setStep(1);\n    resetState();\n    setForm({});\n    setErrors(null);\n  };\n  return (\n    <TransitionablePortal\n      transition={{\n        duration: 400,\n        animation: 'fade',\n      }}\n      onClose={() => setOpen(false)}\n      open={open}\n    >\n      <Modal\n        size=\"small\"\n        open={open}\n        closeOnDimmerClick={false}\n        closeOnDocumentClick={false}\n        onClose={() => {\n          clearForm();\n        }}\n      >\n        {destinationContact && (\n          <Modal.Header className=\"modal-title\">\n            {global.translate(`Send Money to `)}\n            <strong>{destinationContact.FirstName}</strong>\n          </Modal.Header>\n        )}\n\n        {step === 1 && (\n          <Modal.Content className=\"entities\">\n            <div className=\"entities\">\n              <TransactionEntity\n                data={userData}\n                id={1}\n                name=\"sourceWallet\"\n                form={form}\n                walletList={walletList}\n                currentOption={currentOption}\n                setCurrentOption={setCurrentOption}\n                onChange={onOptionsChange}\n                isSendingMoney={isSendingMoney}\n              />\n              <h4 className=\"to\">{global.translate('To')}: </h4>\n\n              {destinationContact && (\n                <TransactionEntity\n                  data={{\n                    data: destinationContact || {},\n                  }}\n                  form={form}\n                  name=\"user2wallets\"\n                  id={2}\n                  walletList={\n                    destinationWallets &&\n                    destinationWallets.map(item => ({\n                      AccountNumber: item.WalletNumber,\n                      Flag: item.Flag,\n                      AccountName: item.WalletName || '',\n                      Currency: item.Currency,\n                    }))\n                  }\n                  currentOption={currentDestOption}\n                  setCurrentOption={setCurrentDestOption}\n                  onChange={onOptionsChange}\n                />\n              )}\n            </div>\n\n            <div className=\"remaining-money-shade\">\n              <h4 className=\"available\">\n                {global.translate(\n                  'Available Balance in the Selected Wallet',\n                )}\n                <p className=\"available-value\">{balanceOnWallet}</p>\n              </h4>\n            </div>\n\n            <div className=\"money-section\">\n              <div className=\"amount\">\n                <span>{global.translate('Amount', 116)}</span> &nbsp;\n              </div>\n              <div className=\"amount-value\">\n                <div className=\"form-information\">\n                  <Input\n                    type=\"number\"\n                    name=\"amount\"\n                    placeholder={global.translate('Amount')}\n                    onChange={onOptionsChange}\n                    value={form.amount || null}\n                  />\n                  <strong>{currency}</strong>\n                </div>\n              </div>\n\n              <div className=\"plus-minus-icons\">\n                <div\n                  role=\"button\"\n                  tabIndex=\"0\"\n                  onKeyPress={() => {}}\n                  className=\"icon\"\n                  onClick={() => {\n                    setForm({\n                      ...form,\n                      amount: parseInt(form.amount, 10) - 1,\n                    });\n                  }}\n                >\n                  <Icon name=\"minus\" className=\"inner-icon\" />\n                </div>\n                <div\n                  className=\"icon\"\n                  role=\"button\"\n                  tabIndex=\"0\"\n                  onClick={() => {\n                    setForm({\n                      ...form,\n                      amount: parseInt(form.amount, 10) + 1,\n                    });\n                  }}\n                  onKeyPress={() => {}}\n                >\n                  <Icon name=\"add\" className=\"inner-icon\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"load-stuff\">\n              {errors && <Message message={errors} />}\n              {confirmationError && confirmationError[0] && (\n                <Message\n                  message={\n                    confirmationError &&\n                    confirmationError[0].Description\n                      ? global.translate(\n                          confirmationError &&\n                            confirmationError[0].Description,\n                        )\n                      : global.translate(confirmationError.error)\n                  }\n                />\n              )}\n              {confirmationError && !confirmationError[0] && (\n                <Message\n                  message={global.translate(confirmationError.error)}\n                />\n              )}\n              {checking && (\n                <LoaderComponent\n                  loaderContent={global.translate('Working…', 412)}\n                />\n              )}\n            </div>\n          </Modal.Content>\n        )}\n\n        {step === 2 && confirmationData && confirmationData[0] && (\n          <Modal.Content className=\"ss-content\">\n            <div className=\"ss-amount\">\n              <p>{global.translate('Amount', 116)}: </p> &nbsp;&nbsp;\n              <p>\n                <strong>{confirmationData[0].Amount}</strong>\n              </p>\n            </div>\n\n            <div className=\"fees\">\n              <div className=\"fees-list\">\n                <p>{global.translate('Fees', 117)}</p>\n\n                <div className=\"fees-item\">\n                  <p className=\"left\">\n                    {global.translate('Fees', 117)}:\n                  </p>\n                  <p className=\"right\">{confirmationData[0].Fees}</p>\n                </div>\n                <div className=\"fees-item\">\n                  <p className=\"left\">\n                    {global.translate('External fees', 121)}:\n                  </p>\n                  <p className=\"right\">\n                    {confirmationData[0].ExternalFees}\n                  </p>\n                </div>\n                <div className=\"fees-item\">\n                  <p className=\"left\">\n                    {global.translate('Exchange fees', 120)}:\n                  </p>\n                  <p className=\"right\">\n                    {' '}\n                    {confirmationData[0].ExchangeFees}\n                  </p>\n                </div>\n                <div className=\"fees-item\">\n                  <p className=\"left\">\n                    {global.translate('Taxes', 965)}:\n                  </p>\n                  <p className=\"right\">{confirmationData[0].Taxes}</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"exchange-rate\">\n              <p>\n                {global.translate('Exchange Rate', 80)}=\n                {confirmationData[0].ExchangeRate}\n              </p>\n            </div>\n            <div className=\"amount-to-be-recieved-break-down\">\n              <div className=\"fees-item\">\n                <p className=\"left\" style={{ marginTop: '13px' }}>\n                  {global.translate('Total', 269)}:\n                </p>\n                <p className=\"right\">\n                  <strong\n                    className=\"bolder\"\n                    style={{ fontSize: '20px', fontWeight: 500 }}\n                  >\n                    {confirmationData[0].TotalAmount}\n                  </strong>\n                </p>\n              </div>\n              <div className=\"fees-item\">\n                <p className=\"left\" style={{ marginTop: '13px' }}>\n                  {global.translate('Amount to be received', 397)}:\n                </p>\n                <p className=\"right\">\n                  {' '}\n                  <strong\n                    className=\"bolder\"\n                    style={{ fontSize: '20px', fontWeight: 500 }}\n                  >\n                    {confirmationData[0].AmountToBeSent}\n                  </strong>\n                </p>\n              </div>\n            </div>\n\n            <div className=\"confirm-form\">\n              <Input\n                name=\"reference\"\n                onChange={onOptionsChange}\n                value={form.reference || ''}\n                placeholder={global.translate(\n                  'Enter reference here',\n                  433,\n                )}\n              />\n              <Input\n                name=\"description\"\n                onChange={onOptionsChange}\n                value={form.description || ''}\n                placeholder={global.translate(\n                  'Enter description here',\n                  434,\n                )}\n              />\n            </div>\n\n            <div className=\"one-tme-transfer\">\n              <p>{global.translate('Recurring transfer', 265)}</p>\n\n              <ToggleSwitch\n                id=\"isRecurring\"\n                name=\"isRecurring\"\n                value={form.isRecurring || false}\n                onChange={checked =>\n                  onOptionsChange(checked, {\n                    name: 'isRecurring',\n                    value: checked,\n                  })\n                }\n              />\n            </div>\n\n            {form.isRecurring && (\n              <div className=\"recurring\">\n                <div className=\"repeat-date\">\n                  <p className=\"repeated-on\">\n                    {global.translate('Payment day of the month')}:{' '}\n                  </p>\n                  <span>\n                    <Dropdown\n                      className=\"custom-dropdown2\"\n                      search\n                      name=\"day\"\n                      value={form.day || ''}\n                      onChange={onOptionsChange}\n                      selection\n                      options={days}\n                    />\n                  </span>\n                </div>\n                <div className=\"from-to-dates\">\n                  <div className=\"from-two-group\">\n                    <p className=\"from\">\n                      {' '}\n                      {global.translate('From')}:\n                    </p>\n                    <DateInput\n                      icon=\"dropdown\"\n                      popupPosition=\"top left\"\n                      animation=\"fade\"\n                      placeholder={global.translate(\n                        'Start date',\n                        338,\n                      )}\n                      iconPosition=\"right\"\n                      dateFormat=\"YYYY-MM-DD\"\n                      name=\"startDate\"\n                      value={\n                        form.startDate\n                          ? new Date(form.startDate).toDateString()\n                          : ''\n                      }\n                      onChange={onOptionsChange}\n                    />\n                  </div>\n                  <div className=\"from-two-group\">\n                    <p className=\"from\">{global.translate('to')}:</p>\n                    <DateInput\n                      icon=\"dropdown\"\n                      popupPosition=\"top left\"\n                      animation=\"fade\"\n                      placeholder={global.translate('End date', 398)}\n                      iconPosition=\"right\"\n                      dateFormat=\"YYYY-MM-DD\"\n                      name=\"endDate\"\n                      value={\n                        form.endDate\n                          ? new Date(form.endDate).toDateString()\n                          : ''\n                      }\n                      onChange={onOptionsChange}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"send-now\">\n                  <p>\n                    {global.translate('Do not send the money now')}\n                  </p>\n\n                  <ToggleSwitch\n                    id=\"sendNow\"\n                    name=\"sendNow\"\n                    value={form.sendNow}\n                    onChange={checked =>\n                      onOptionsChange(checked, {\n                        name: 'sendNow',\n                        value: checked,\n                      })\n                    }\n                  />\n                </div>\n              </div>\n            )}\n            <hr />\n            <div className=\"pin-number\">\n              <PinCodeForm\n                label={global.translate(\n                  'Confirm  your PIN number',\n                  941,\n                )}\n                onChange={onOptionsChange}\n                name=\"pin\"\n                shouldClear={shouldClear}\n                value={form.pin || ''}\n              />\n            </div>\n            <div\n              className=\"load-stuff\"\n              style={{ alignSelf: 'center' }}\n            >\n              {errors && <Message message={errors} />}\n              {error && error[0] && (\n                <Message\n                  message={\n                    error && error[0].Description\n                      ? global.translate(error[0].Description)\n                      : global.translate(error.error)\n                  }\n                />\n              )}\n              {error && !error[0] && (\n                <Message message={global.translate(error.error)} />\n              )}\n              {loading && (\n                <LoaderComponent\n                  loaderContent={global.translate('Working…', 412)}\n                />\n              )}\n            </div>\n          </Modal.Content>\n        )}\n\n        <Modal.Actions>\n          <>\n            {step !== 1 && step !== 3 && (\n              <Button\n                negative\n                disabled={checking || loading}\n                onClick={() => {\n                  setStep(step - 1);\n                  resetState();\n                }}\n              >\n                {global.translate('Back')}\n              </Button>\n            )}\n\n            {step !== 3 && (\n              <Button\n                negative\n                disabled={checking || loading}\n                onClick={() => {\n                  clearForm();\n                }}\n              >\n                {global.translate('Cancel', 86)}\n              </Button>\n            )}\n            <Button\n              positive\n              disabled={checking || loading}\n              onClick={() => {\n                if (step === 1) {\n                  checkTransactionConfirmation();\n                } else if (step === 2) {\n                  moveFundsToToUWallet();\n                }\n              }}\n            >\n              {global.translate('Send Money', 112)}\n            </Button>\n          </>\n        </Modal.Actions>\n      </Modal>\n    </TransitionablePortal>\n  );\n};\n\nSendMoneyModal.propTypes = {\n  open: PropTypes.bool,\n  userData: PropTypes.objectOf(PropTypes.any).isRequired,\n  setOpen: PropTypes.func,\n  walletList: PropTypes.arrayOf(PropTypes.any),\n  destinationContact: PropTypes.objectOf(PropTypes.any).isRequired,\n  destinationWallets: PropTypes.arrayOf(PropTypes.any),\n  onOptionsChange: PropTypes.func,\n  form: PropTypes.objectOf(PropTypes.any).isRequired,\n  balanceOnWallet: PropTypes.string,\n  setForm: PropTypes.func,\n  currency: PropTypes.string,\n  isRecurring: PropTypes.bool,\n  checkTransactionConfirmation: PropTypes.func,\n  checking: PropTypes.bool,\n  confirmationError: PropTypes.objectOf(PropTypes.any).isRequired,\n  confirmationData: PropTypes.objectOf(PropTypes.any).isRequired,\n  moveFundsToToUWallet: PropTypes.func,\n  loading: PropTypes.bool,\n  error: PropTypes.objectOf(PropTypes.any).isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  errors: PropTypes.objectOf(PropTypes.any).isRequired,\n  setErrors: PropTypes.func,\n  step: PropTypes.number,\n  setStep: PropTypes.func,\n  resetState: PropTypes.func,\n  shouldClear: PropTypes.bool,\n  isSendingMoney: PropTypes.bool,\n  setDestinationContact: PropTypes.func,\n};\n\nSendMoneyModal.defaultProps = {\n  moveFundsToToUWallet: () => {},\n  loading: false,\n  currency: null,\n  isRecurring: false,\n  checkTransactionConfirmation: () => {},\n  checking: false,\n  balanceOnWallet: 0,\n  setForm: () => {},\n  destinationWallets: [],\n  onOptionsChange: () => {},\n  setOpen: () => {},\n  walletList: [],\n  open: false,\n  setErrors: () => {},\n  step: 1,\n  setStep: () => {},\n  resetState: () => {},\n  shouldClear: false,\n  isSendingMoney: false,\n  setDestinationContact: () => {},\n};\nexport default SendMoneyModal;\n","import { ADD_CONTACT_TO_RECENTS } from 'constants/action-types/contacts/getLastActiveContacts';\n\nexport default (data, type) => dispatch => {\n  return dispatch({\n    type: ADD_CONTACT_TO_RECENTS,\n    payload: { data, type },\n  });\n};\n","/* eslint-disable consistent-return */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport moveFunds, {\n  clearMoveFundsErrors,\n} from 'redux/actions/money-transfer/moveFunds';\nimport SendMoney from 'components/MoneyTransfer/SendMoney';\nimport getallContacts from 'redux/actions/contacts/getContactList';\nimport getMyWallets from 'redux/actions/users/getMyWallets';\nimport confirmTransaction from 'redux/actions/money-transfer/confirmTransaction';\nimport addTransactionContactToRecents from 'redux/actions/contacts/addTransactionContactToRecents';\nimport getRecentActiveContacts from 'redux/actions/contacts/getRecentActiveContacts';\n\nconst SendMoneyContainer = ({\n  setSendMoneyOpen,\n  sendMoneyOpen,\n  destinationContact,\n  setDestinationContact,\n  isSendingMoney,\n}) => {\n  const { allContacts } = useSelector(state => state.contacts);\n  const { walletList } = useSelector(state => state.user.myWallets);\n  const { userData } = useSelector(({ user }) => user);\n  const [contactPID, setContactPID] = React.useState({});\n  const [form, setForm] = useState({});\n  const [balanceOnWallet, setBalance] = useState(0.0);\n  const [currency, setCurrency] = useState(null);\n  const [destinationWallets, setDestinationWallets] = useState([]);\n  const [countryCode, setCountryCode] = useState(null);\n  const [targetCurrency, setTargetCurrencyCode] = useState(null);\n  const [contacts, setallContacts] = useState([]);\n  const [step, setStep] = useState(1);\n\n  const [errors, setErrors] = useState(null);\n  const DefaultWallet = useSelector(\n    state =>\n      state.user.userData.data &&\n      state.user.userData.data.DefaultWallet,\n  );\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (walletList.length === 0) {\n      getMyWallets()(dispatch);\n    }\n  }, [walletList]);\n\n  useEffect(() => {\n    setForm({ ...form, sourceWallet: DefaultWallet });\n  }, [DefaultWallet, sendMoneyOpen]);\n\n  const {\n    checking,\n    confirmationError,\n    confirmationData,\n  } = useSelector(state => state.moneyTransfer.confirmTransaction);\n  const { data: recentContacts } = useSelector(\n    state => state.contacts.activeContacts,\n  );\n  const { data: activeExternalContacts } = useSelector(\n    state => state.contacts.activeExternalContacts,\n  );\n  const { loading, error, data } = useSelector(\n    state => state.moneyTransfer.moveFundsTo2UWallet,\n  );\n  const [shouldClear, setShouldClear] = useState(false);\n\n  useEffect(() => {\n    if (error) {\n      if (error && error[0].UserLoginCorrect === 'FALSE') {\n        setShouldClear(true);\n      } else {\n        setShouldClear(false);\n      }\n    }\n  }, [error]);\n\n  useEffect(() => {\n    if (confirmationData && confirmationData[0]) {\n      setStep(step + 1);\n    }\n  }, [confirmationData]);\n\n  const isNewContact = (contact, type = 'internal') => {\n    let exists = false;\n    if (\n      type === 'internal' &&\n      Array.isArray(recentContacts) &&\n      contact\n    ) {\n      recentContacts\n        .filter(item => item && item.ContactPID)\n        .forEach(element => {\n          if (element.ContactPID === contact.ContactPID) {\n            exists = true;\n            return true;\n          }\n        });\n    }\n    if (\n      type !== 'internal' &&\n      Array.isArray(activeExternalContacts) &&\n      contact\n    ) {\n      activeExternalContacts\n        .filter(item => item && item.PhoneNumber)\n        .forEach(element => {\n          if (element.PhoneNumber === contact.PhoneNumber) {\n            exists = true;\n            return true;\n          }\n        });\n    }\n\n    return exists;\n  };\n\n  const addRecentContact = (contact, type = 'internal') => {\n    if (!isNewContact(contact, type)) {\n      addTransactionContactToRecents(\n        destinationContact,\n        type,\n      )(dispatch);\n    }\n  };\n  const getRecentContacts = () => {\n    const params = {\n      PID: userData.data && userData.data.PID,\n      MaxRecordsReturned: '5',\n    };\n    getRecentActiveContacts(params)(dispatch);\n  };\n\n  useEffect(() => {\n    if (data && data[0]) {\n      getMyWallets()(dispatch);\n      if (data[0].type !== 'send-money')\n        toast.success(global.translate(data[0].Description));\n      getRecentContacts();\n      setForm({});\n      if (data[0].TransferNumber) {\n        addRecentContact(destinationContact, 'external');\n      }\n      clearMoveFundsErrors()(dispatch);\n    }\n  }, [data]);\n\n  const resetState = () => {\n    clearMoveFundsErrors()(dispatch);\n  };\n\n  useEffect(() => {\n    setForm({ ...form, isRecurring: false });\n    setForm({ ...form, sendNow: true });\n  }, [confirmationData]);\n\n  useEffect(() => {\n    setallContacts(allContacts.data);\n  }, [allContacts.data]);\n  const balanceData = useSelector(state => state.user.userData.data);\n\n  useEffect(() => {\n    if (balanceData) {\n      setBalance(balanceData.Balance);\n    }\n  }, [balanceData]);\n\n  useEffect(() => {\n    if (form.user2wallets) {\n      const contactWallets = contacts.find(contact => {\n        return contact.ContactPID === destinationContact.ContactPID;\n      });\n      const contactWallet =\n        contactWallets.Wallets &&\n        contactWallets.Wallets.find(\n          wallet => wallet.WalletNumber === form.user2wallets,\n        );\n      setTargetCurrencyCode(\n        (contactWallet && contactWallet.Currency) || '',\n      );\n    }\n  }, [form.user2wallets]);\n\n  const loadContacts = () => getallContacts()(dispatch);\n  useEffect(() => {\n    if (!allContacts.data) {\n      loadContacts();\n    }\n  }, []);\n\n  const getUserContactDetails = PID => {\n    return (\n      allContacts.data &&\n      allContacts.data.find(contact => contact.ContactPID === PID)\n    );\n  };\n\n  const isUsingDefaultWallet = () =>\n    userData.data.DefaultWallet === form.sourceWallet || false;\n\n  const validate = () => {\n    let hasError = false;\n    if (parseFloat(form.amount, 10) === 0) {\n      setErrors(\n        global.translate('The Transfer amount can not be zero'),\n      );\n      hasError = true;\n    }\n    if (parseFloat(balanceOnWallet, 10) === 0) {\n      setErrors(\n        global.translate(\n          'You do not have enough money in this wallet for this operation',\n          394,\n        ),\n      );\n      hasError = true;\n      return true;\n    }\n\n    if (form.amount === '' || !form.amount) {\n      setErrors(\n        global.translate(\n          'You must enter the amount for this operation.',\n          393,\n        ),\n      );\n      hasError = true;\n    }\n    if (form.user2wallets === '' || !form.user2wallets) {\n      setErrors(\n        global.translate(\n          'Please provide the target wallet number.',\n          437,\n        ),\n      );\n      hasError = true;\n    }\n\n    return hasError;\n  };\n\n  const checkTransactionConfirmation = () => {\n    const data = {\n      CountryCode: countryCode,\n      Amount: form.amount && form.amount.toString(),\n      TargetCurrency:\n        targetCurrency ||\n        (form.user2wallets && form.user2wallets.substr(0, 3)),\n      TargetType: '9',\n      SourceWallet: form.sourceWallet,\n    };\n    setErrors(null);\n    if (!validate()) {\n      confirmTransaction(data)(dispatch);\n    }\n  };\n\n  const { digit0, digit1, digit2, digit3 } = form;\n  const PIN = `${digit0}${digit1}${digit2}${digit3}`;\n\n  const pinIsValid = () => PIN.length === 4;\n  const moveFundsToToUWallet = () => {\n    const data = {\n      PIN,\n      CountryCode: countryCode,\n      Amount: form.amount && form.amount.toString(),\n      ContactPID: contactPID,\n      UseDefaultWallet: isUsingDefaultWallet() ? 'YES' : 'No',\n      TargetWallet: form.user2wallets,\n      SourceWallet: form.sourceWallet,\n      DateFrom: (form.isRecurring && form.startDate) || '',\n      DateTo: (form.isRecurring && form.endDate) || '',\n      Day: form.isRecurring ? form.day && form.day.toString() : '0',\n      Reccurent: form.isRecurring ? 'YES' : 'No',\n      SendNow: form.sendNow ? 'YES' : 'No',\n      Reference: form.reference || '',\n      Description: form.description || '',\n    };\n\n    if (!pinIsValid()) {\n      setErrors(\n        global.translate('Please provide your PIN number.', 543),\n      );\n      return;\n    }\n    if (form.isRecurring) {\n      if (form.day === '' || !form.day) {\n        setErrors(\n          global.translate(\n            'Please provide the payment day of the month.',\n            1290,\n          ),\n        );\n        return;\n      }\n      if (form.startDate === '' || !form.startDate) {\n        setErrors(\n          global.translate('Please provide the starting date', 1288),\n        );\n        return;\n      }\n      if (form.endDate === '' || !form.endDate) {\n        setErrors(\n          global.translate('Please provide the ending date', 1289),\n        );\n        return;\n      }\n\n      if (form.endDate <= form.startDate) {\n        setErrors(\n          global.translate(\n            'Please choose an end date thats later than the start date',\n          ),\n        );\n        return;\n      }\n    }\n    setErrors(null);\n    moveFunds(data)(dispatch);\n  };\n\n  useEffect(() => {\n    if (destinationContact) {\n      const contact = getUserContactDetails(\n        destinationContact.ContactPID,\n      );\n      setContactPID(destinationContact.ContactPID);\n      setDestinationWallets(contact && contact.Wallets);\n      setCountryCode(contact && contact.CountryCode);\n    }\n  }, [destinationContact]);\n\n  useEffect(() => {\n    if (form.sourceWallet && walletList) {\n      const walletData =\n        walletList &&\n        walletList.find(\n          item => item.AccountNumber === form.sourceWallet,\n        );\n\n      if (walletData) {\n        setBalance(\n          `${walletData.Balance} ${walletData.CurrencyCode}`,\n        );\n        setCurrency(walletData.CurrencyCode);\n      }\n    }\n  }, [form]);\n\n  const onOptionsChange = (e, { name, value }) => {\n    setForm({ ...form, [name]: value });\n  };\n\n  return (\n    <SendMoney\n      history={history}\n      allContacts={allContacts}\n      contacts={contacts}\n      setErrors={setErrors}\n      walletList={walletList}\n      userData={userData}\n      onOptionsChange={onOptionsChange}\n      form={form}\n      balanceOnWallet={balanceOnWallet}\n      setBalance={setBalance}\n      setForm={setForm}\n      modalOpen={sendMoneyOpen}\n      setOpen={setSendMoneyOpen}\n      destinationWallets={destinationWallets}\n      setDestinationContact={setDestinationContact}\n      setDestinationWallets={destinationWallets}\n      checkTransactionConfirmation={checkTransactionConfirmation}\n      currency={currency}\n      checking={checking}\n      confirmationError={confirmationError}\n      confirmationData={confirmationData}\n      moveFundsToToUWallet={moveFundsToToUWallet}\n      setContactPID={setContactPID}\n      destinationContact={destinationContact}\n      loading={loading}\n      errors={errors}\n      error={error}\n      data={data}\n      retryContacts={loadContacts}\n      DefaultWallet={DefaultWallet}\n      step={step}\n      setStep={setStep}\n      resetState={resetState}\n      shouldClear={shouldClear}\n      isSendingMoney={isSendingMoney}\n    />\n  );\n};\n\nSendMoneyContainer.propTypes = {\n  setSendMoneyOpen: PropTypes.func.isRequired,\n  sendMoneyOpen: PropTypes.bool.isRequired,\n  destinationContact: PropTypes.objectOf(PropTypes.any).isRequired,\n  setDestinationContact: PropTypes.func.isRequired,\n  isSendingMoney: PropTypes.bool.isRequired,\n};\nexport default SendMoneyContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Loader } from 'semantic-ui-react';\nimport './style.scss';\n\nconst LoaderComponent = ({\n  paddingTop,\n  paddingBottom,\n  loaderSize,\n  loaderContent,\n  style,\n}) => (\n  <div\n    style={{ paddingTop, paddingBottom, ...style }}\n    className=\"appLoader\"\n  >\n    <span className=\"loader-content\">\n      <span>{global.translate(loaderContent)} </span>{' '}\n      <Loader\n        size={loaderSize}\n        active\n        className=\"app-loading\"\n        inline=\"centered\"\n        style={{ marginLeft: '10px' }}\n      />\n    </span>\n  </div>\n);\n\nLoaderComponent.defaultProps = {\n  paddingTop: '',\n  paddingBottom: '',\n  style: {},\n  loaderSize: 'small',\n  loaderContent: '',\n};\n\nLoaderComponent.propTypes = {\n  paddingTop: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n  paddingBottom: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]),\n  style: PropTypes.objectOf(PropTypes.any),\n  loaderSize: PropTypes.string,\n  loaderContent: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.any,\n  ]),\n};\n\nexport default LoaderComponent;\n"],"sourceRoot":""}